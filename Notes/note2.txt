Hooks are the new feature introduced in the React 16.8 version. 
It allows you to use state and other React features without writing a class.
 Hooks are the functions which "hook into" React state and lifecycle features from function components.
 It does not work inside classes.

 Rules of Hooks
Hooks are similar to JavaScript functions, but you need to follow these two rules when using them.
 Hooks rule ensures that all the stateful logic in a component is visible in its source code. 
 These rules are:
1. Only call Hooks at the top level
Do not call Hooks inside loops, conditions, or nested functions.
 Hooks should always be used at the top level of the React functions.
  This rule ensures that Hooks are called in the same order each time a components renders.
2. Only call Hooks from React functions
You cannot call Hooks from regular JavaScript functions. 
Instead, you can call Hooks from React function components. 
Hooks can also be called from custom Hooks.

1.useState se two value access form array formate [vriable,function]
syntax-
let [vriable,function]= useState(value)
eaxmple:
let [counter, setCounter]= useState(1)
const addvalue=()=>{
  setCounter(counter + 1)
}
Reference
    useState(initialState)
    set functions, like setSomething(nextState)
Usage
    Adding state to a component
    Updating state based on the previous state
    Updating objects and arrays in state
    Avoiding recreating the initial state
    Resetting state with a key
    Storing information from previous renders
Troubleshooting
    I’ve updated the state, but logging gives me the old value
    I’ve updated the state, but the screen doesn’t update
    I’m getting an error: “Too many re-renders”
    My initializer or updater function runs twice
    I’m trying to set state to a function, but it gets called instead


2.useCallback
useCallback is a React Hook that lets you cache a function definition between re-renders.
syntax-
const cachedFn = useCallback(fn, dependencies)
eaxmple:
 const passwordGenerator = useCallback(() => {
    let pass = ""
    let str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
    if (numberAllowed) str += "0123456789"
    if (charAllowed) str += "!@#$%^&*-_+="

    for (let i = 1; i <= length; i++) {
      let char = Math.floor(Math.random() * str.length + 1)
      pass += str.charAt(char)
    }
    setPassword(pass)
  }, [length, numberAllowed, charAllowed, setPassword])

Reference
  useCallback(fn, dependencies)
Usage
  Skipping re-rendering of components
  Updating state from a memoized callback
  Preventing an Effect from firing too often
  Optimizing a custom Hook
Troubleshooting
  Every time my component renders, useCallback returns a different function
  I need to call useCallback for each list item in a loop, but it’s not allowed

3.useEffect
  useEffect is a React Hook that lets you synchronize a component with an external system.
syntax-
  useEffect(setup, dependencies?)
Reference
  useEffect(setup, dependencies?)
  eaxmple-
  useEffect(() => {
    passwordGenerator()
  }, [length, numberAllowed, charAllowed, passwordGenerator])
  
Usage
  Connecting to an external system
  Wrapping Effects in custom Hooks
  Controlling a non-React widget
  Fetching data with Effects
  Specifying reactive dependencies
  Updating state based on previous state from an Effect
  Removing unnecessary object dependencies
  Removing unnecessary function dependencies
  Reading the latest props and state from an Effect
  Displaying different content on the server and the client
Troubleshooting
  My Effect runs twice when the component mounts
  My Effect runs after every re-render
  My Effect keeps re-running in an infinite cycle
  My cleanup logic runs even though my component didn’t unmount
  My Effect does something visual, and I see a flicker before it runs


4.useRef
useRef is a React Hook that lets you reference a value that’s not needed for rendering.
syntax-
  const ref = useRef(initialValue)
Reference
  useRef(initialValue)
Usage
  Referencing a value with a ref
  Manipulating the DOM with a ref
  Avoiding recreating the ref contents
Troubleshooting
  I can’t get a ref to a custom component
