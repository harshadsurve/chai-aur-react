Hooks are the new feature introduced in the React 16.8 version. 
It allows you to use state and other React features without writing a class.
 Hooks are the functions which "hook into" React state and lifecycle features from function components.
 It does not work inside classes.

 Rules of Hooks
Hooks are similar to JavaScript functions, but you need to follow these two rules when using them.
 Hooks rule ensures that all the stateful logic in a component is visible in its source code. 
 These rules are:
1. Only call Hooks at the top level
Do not call Hooks inside loops, conditions, or nested functions.
 Hooks should always be used at the top level of the React functions.
  This rule ensures that Hooks are called in the same order each time a components renders.
2. Only call Hooks from React functions
You cannot call Hooks from regular JavaScript functions. 
Instead, you can call Hooks from React function components. 
Hooks can also be called from custom Hooks.

1.useState se two value access form array formate [vriable,function]
syntax-
let [vriable,function]= useState(value)
eaxmple:
let [counter, setCounter]= useState(1)
const addvalue=()=>{
  setCounter(counter + 1)
}
